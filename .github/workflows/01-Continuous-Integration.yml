name: 01-Continuous-Integration - Build & Push Docker Image

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

env:
  BUILD_VERSION: "1.3.${{ github.run_number }}"
  ARGOCD_SERVER: "127.0.0.1:8081"
  ACR_PATH: "cxdksf102326acr.azurecr.io"

permissions:
  contents: write

jobs:
  Continuous-Integration:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Build with Maven
      - name: Build with Maven
        run: mvn -B clean verify install

      # # Run SonarQube analysis
      # - name: SonarQube Scan
      #   run: |
      #     sonar-scanner
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
        
      # Upload artifact to Nexus
      - name: Deploy to Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          Write-Host "Deploying version $BUILD_VERSION"
      
          # Use double quotes for proper expansion
          mvn deploy:deploy-file `
            "-DgroupId=com.example" `
            "-DartifactId=weather-app" `
            "-Dversion=$env:BUILD_VERSION" `
            "-Dpackaging=war" `
            "-Dfile=target/weather-app.war" `
            "-DrepositoryId=maven-release-repo-weather-app" `
            "-Durl=http://localhost:8899/repository/maven-release-repo-weather-app/" `
            "-Dusername=$env:NEXUS_USER" `
            "-Dpassword=$env:NEXUS_PASS"
        shell: powershell
      
      - name: Prepare artifact directory
        run: |
          mkdir -p application-artifact
          cp target/*.war application-artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: weather-app1-${{ env.BUILD_VERSION }}.war
          path: application-artifact

        # Download artifact from Nexus
      - name: Download artifact from Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          $ARTIFACT_URL="http://localhost:8899/repository/maven-release-repo-weather-app/com/example/weather-app/${{ env.BUILD_VERSION }}/weather-app-${{ env.BUILD_VERSION }}.war"
          Invoke-WebRequest -Uri $ARTIFACT_URL -OutFile weather-app-${{ env.BUILD_VERSION }}.war -Credential (New-Object System.Management.Automation.PSCredential($env:NEXUS_USER,(ConvertTo-SecureString $env:NEXUS_PASS -AsPlainText -Force)))

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
        # Login to ACR
      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: $env:ACR_PATH
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Docker login to ACR
        run: |
          az acr login --name $env:ACR_PATH
        shell: powershell
    
      - name: Build Docker Image
        run: |
          docker build `
            --build-arg BUILD_VERSION=${{ env.BUILD_VERSION }} `
            -t $env:ACR_PATH/myapp:${{ env.BUILD_VERSION }} .

      - name: Push Docker Image
        run: |
          docker push $env:ACR_PATH/myapp:${{ env.BUILD_VERSION }}


      - name: Manual Approval
        uses: hmarr/auto-approve-action@v2
        with:
          # This step will pause the workflow and require manual approval
          github-token: ${{ secrets.GITHUB_TOKEN }}
          timeout-minutes: 1440


      # - name: Create/Update Kubernetes Secret
      #   run: |
      #     kubectl create secret generic weather-secrets `
      #       --from-literal=OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }} `
      #       --dry-run=client -o yaml | kubectl apply -f -
      
      # - name: Update Kubernetes manifest (PowerShell)
      #   shell: powershell
      #   run: |
      #     $file = "k8s/deployment.yaml"
      #     $content = Get-Content $file
      #     $newContent = $content -replace 'image: .*', "image: ${{ env.ACR_PATH }}/myapp:${{ env.BUILD_VERSION }}   # <-- updated by pipeline"
      #     Set-Content $file $newContent

      # - name: Commit manifest update
      #   shell: powershell
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add k8s/deployment.yaml
      #     git commit -m "Update deployment.yaml with image tag ${{ env.BUILD_VERSION }}"
      #     git push

