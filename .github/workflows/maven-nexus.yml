name: Maven Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_VERSION: "1.3.${{ github.run_number }}"

jobs:
  Build-Deploy:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Build with Maven
      - name: Build with Maven
        run: mvn -B clean verify install

      # Run SonarQube analysis
      - name: SonarQube Scan
        run: |
          sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        
      # Upload artifact to Nexus
      - name: Deploy to Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          Write-Host "Deploying version $BUILD_VERSION"
      
          # Use double quotes for proper expansion
          mvn deploy:deploy-file `
            "-DgroupId=com.example" `
            "-DartifactId=weather-app" `
            "-Dversion=$env:BUILD_VERSION" `
            "-Dpackaging=war" `
            "-Dfile=target/weather-app.war" `
            "-DrepositoryId=maven-release-repo-weather-app" `
            "-Durl=http://localhost:8899/repository/maven-release-repo-weather-app/" `
            "-Dusername=$env:NEXUS_USER" `
            "-Dpassword=$env:NEXUS_PASS"
        shell: powershell
      
      - name: Prepare artifact directory
        run: |
          mkdir -p application-artifact
          cp target/*.war application-artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: weather-app1-${{ env.BUILD_VERSION }}.war
          path: application-artifact
    
      # (Optional) Deploy to Tomcat if reachable
      - name: Deploy WAR to Tomcat
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
          TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
          TOMCAT_PASS: ${{ secrets.TOMCAT_PASS }}
        run: |
          Write-Host "Downloading version $BUILD_VERSION"

          # Correct Nexus artifact URL for artifactId weather-app
          $ARTIFACT_URL = "http://localhost:8899/repository/maven-release-repo-weather-app/com/example/weather-app/$env:BUILD_VERSION/weather-app-$env:BUILD_VERSION.war"
          Write-Host "Downloading from Nexus: $ARTIFACT_URL"

          # Create Nexus credential
          $securePassword = ConvertTo-SecureString $env:NEXUS_PASS -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential($env:NEXUS_USER, $securePassword)

          # Download the WAR
          Invoke-WebRequest -Uri $ARTIFACT_URL -OutFile "weather-app1-$env:BUILD_VERSION.war" -Credential $cred

          # Deploy WAR to Tomcat
          Write-Host "Deploying to Tomcat..."
          $tomcatCred = New-Object System.Management.Automation.PSCredential($env:TOMCAT_USER, (ConvertTo-SecureString $env:TOMCAT_PASS -AsPlainText -Force))
          Invoke-WebRequest -Uri "http://localhost:5556/manager/text/deploy?path=/weather-app1&update=true" -Method Put -InFile "weather-app1-$env:BUILD_VERSION.war" -Credential $tomcatCred
        shell: powershell

      # # (Optional) Deploy to JFrog
      # - name: Upload WAR and POM to JFrog
      #   shell: powershell
      #   run: |
      #     $VERSION="1.3"
      #     $REPO="libs-release-local"  # change if snapshot
      #     $GROUP_PATH="com/example/weather-app"
          
      #     $WAR_PATH="target/weather-app-$VERSION.war"
      #     $POM_PATH="target/weather-app-$VERSION.pom"

      #     # Copy WAR and POM to versioned names
      #     Copy-Item "target/weather-app.war" $WAR_PATH
      #     Copy-Item "pom.xml" $POM_PATH

      #     $WAR_URL="http://localhost:8081/artifactory/$REPO/$GROUP_PATH/$VERSION/weather-app-$VERSION.war"
      #     $POM_URL="http://localhost:8081/artifactory/$REPO/$GROUP_PATH/$VERSION/weather-app-$VERSION.pom"

      #     Write-Host "Uploading WAR to $WAR_URL"
      #     curl.exe -u "$env:JFROG_USER:$env:JFROG_API_KEY1" -T $WAR_PATH $WAR_URL --progress-bar

      #     Write-Host "Uploading POM to $POM_URL"
      #     curl.exe -u "$env:JFROG_USER:$env:JFROG_API_KEY1" -T $POM_PATH $POM_URL --progress-bar


      # # 3️⃣ Deploy to JFrog Artifactory using Maven
      # - name: Deploy to JFrog
      #   shell: powershell
      #   env:
      #     JFROG_USER: ${{ secrets.JFROG_USER }}
      #     JFROG_API_KEY: ${{ secrets.JFROG_API_KEY1 }}
      #   run: |
      #     Write-Host "Deploying weather-app to Artifactory"
      #     mvn deploy -X -DskipTests -DaltDeploymentRepository=jfrog-release::default::http://localhost:8081/artifactory/libs-release-local  -Dusername=$env:JFROG_USER -Dpassword=$env:JFROG_API_KEY



