name: Maven Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_VERSION: "1.3.${{ github.run_number }}"

jobs:
  Continuous-Integration:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Build with Maven
      - name: Build with Maven
        run: mvn -B clean verify install

      # Run SonarQube analysis
      - name: SonarQube Scan
        run: |
          sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        
      # Upload artifact to Nexus
      - name: Deploy to Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          Write-Host "Deploying version $BUILD_VERSION"
      
          # Use double quotes for proper expansion
          mvn deploy:deploy-file `
            "-DgroupId=com.example" `
            "-DartifactId=weather-app" `
            "-Dversion=$env:BUILD_VERSION" `
            "-Dpackaging=war" `
            "-Dfile=target/weather-app.war" `
            "-DrepositoryId=maven-release-repo-weather-app" `
            "-Durl=http://localhost:8899/repository/maven-release-repo-weather-app/" `
            "-Dusername=$env:NEXUS_USER" `
            "-Dpassword=$env:NEXUS_PASS"
        shell: powershell
      
      - name: Prepare artifact directory
        run: |
          mkdir -p application-artifact
          cp target/*.war application-artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: weather-app1-${{ env.BUILD_VERSION }}.war
          path: application-artifact

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: weather-app1.war
          path: application-artifact
    
      # (Optional) Deploy to Tomcat if reachable
      - name: Deploy WAR to Tomcat
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
          TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
          TOMCAT_PASS: ${{ secrets.TOMCAT_PASS }}
        run: |
          Write-Host "Downloading version $BUILD_VERSION"

          # Correct Nexus artifact URL for artifactId weather-app
          $ARTIFACT_URL = "http://localhost:8899/repository/maven-release-repo-weather-app/com/example/weather-app/$env:BUILD_VERSION/weather-app-$env:BUILD_VERSION.war"
          Write-Host "Downloading from Nexus: $ARTIFACT_URL"

          # Create Nexus credential
          $securePassword = ConvertTo-SecureString $env:NEXUS_PASS -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential($env:NEXUS_USER, $securePassword)

          # Download the WAR
          Invoke-WebRequest -Uri $ARTIFACT_URL -OutFile "weather-app1-$env:BUILD_VERSION.war" -Credential $cred

          # Deploy WAR to Tomcat
          Write-Host "Deploying to Tomcat..."
          $tomcatCred = New-Object System.Management.Automation.PSCredential($env:TOMCAT_USER, (ConvertTo-SecureString $env:TOMCAT_PASS -AsPlainText -Force))
          Invoke-WebRequest -Uri "http://localhost:5556/manager/text/deploy?path=/weather-app1&update=true" -Method Put -InFile "weather-app1-$env:BUILD_VERSION.war" -Credential $tomcatCred
        shell: powershell

  Continuous-Deployment:
    runs-on: self-hosted

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
      # Login to ACR
    - name: Azure Container Registry Login
      uses: azure/docker-login@v2
      with:
        login-server: pbicux013946acr.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build \
          --build-arg BUILD_VERSION=${{ env.BUILD_VERSION }} \
          -t srbobl071746acr.azurecr.io/myapp:${{ env.BUILD_VERSION }} .
        docker push srbobl071746acr.azurecr.io/myapp:${{ env.BUILD_VERSION }}
    
    # Update K8s manifest (patch image tag)
    - name: Update Kubernetes manifest
      run: |
        sed -i "s|image:.*|image: srbobl071746acr.azurecr.io/myapp:${{ env.BUILD_VERSION }}|" k8s/deployment.yaml

    # ArgoCD Sync
    - name: Deploy via ArgoCD
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      run: |
        # Sync the app to latest image version
        argocd app sync myapp \
          --grpc-web \
          --server $ARGOCD_SERVER \
          --auth-token $ARGOCD_AUTH_TOKEN
