name: 02-Continuous-Integration - Build & Push Docker Image

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
    inputs:
      run_sonar:
        description: "Run SonarQube Scan?"
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

      prepare_artifact:
        description: "Prepare artifact directory and upload?"
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

      trivy_scan:
        description: "Run trivy image scan?"
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

      github_codeQL_analysis:
        description: "Run GitHub CodeQL scan?"
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

      acr_login_upload:
        description: "Upload build image to ACR"
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

env:
  BUILD_VERSION: "1.4.${{ github.run_number }}"
  ARGOCD_SERVER: "127.0.0.1:8081"
  ACR_PATH: "whvtqa122836acr.azurecr.io"

permissions:
  contents: write
  security-events: write   # needed to upload CodeQL results

jobs:
  Continuous-Integration:
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      
      # GitHub CodeQL analysis: Initialize
      # User input required for execution: github_codeQL_analysis
      - name: Initialize CodeQL
        if: ${{ github.event.inputs.github_codeQL_analysis == 'Yes' }}
        uses: github/codeql-action/init@v3
        with:
          languages: java
          cli-download: false   # prevent automatic download
          cli-path: C:\InstalledSoftwares\codeql\codeql.exe

      # Build with Maven
      - name: Build project
        run: mvn -B clean verify install

      # GitHub CodeQL analysis: Autobuild
      # User input required for execution: github_codeQL_analysis
      - name: Autobuild (optional for Java, usually the above build is enough)
        if: ${{ github.event.inputs.github_codeQL_analysis == 'Yes' }}
        uses: github/codeql-action/autobuild@v3

      # GitHub CodeQL analysis: Run
      # User input required for execution: github_codeQL_analysis
      - name: Run CodeQL Analysis
        if: ${{ github.event.inputs.github_codeQL_analysis == 'Yes' }}
        uses: github/codeql-action/analyze@v3
        with:
          output: results
          upload: always

      # Run SonarQube analysis
      # User input required for execution: input: run_sonar
      - name: SonarQube Scan
        if: ${{ github.event.inputs.run_sonar == 'Yes' }}
        run: |
          sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        
      # Upload artifact to Nexus
      - name: Deploy to Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          Write-Host "Deploying version $BUILD_VERSION"
      
          # Use double quotes for proper expansion
          mvn deploy:deploy-file `
            "-DgroupId=com.example" `
            "-DartifactId=weather-app" `
            "-Dversion=$env:BUILD_VERSION" `
            "-Dpackaging=war" `
            "-Dfile=target/weather-app.war" `
            "-DrepositoryId=maven-release-repo-weather-app" `
            "-Durl=http://localhost:8899/repository/maven-release-repo-weather-app/" `
            "-Dusername=$env:NEXUS_USER" `
            "-Dpassword=$env:NEXUS_PASS"
        shell: powershell
      
      # User input required for execution: input: prepare_artifact
      - name: Prepare artifact directory
        id: prepare-artifactory
        if: ${{ github.event.inputs.prepare_artifact == 'Yes' }}
        run: |
          mkdir -p application-artifact
          cp target/*.war application-artifact/

      # Executed if "Prepare artifact directory" is "Yes" and "Prepare artifact directory" is successfully executed
      - name: Upload artifact
        if: ${{ github.event.inputs.prepare_artifact == 'Yes' && steps.prepare-artifactory.conclusion == 'success' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: weather-app1-${{ env.BUILD_VERSION }}.war
          path: application-artifact

      # Download artifact from Nexus
      - name: Download artifact from Nexus
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
        run: |
          $ARTIFACT_URL="http://localhost:8899/repository/maven-release-repo-weather-app/com/example/weather-app/${{ env.BUILD_VERSION }}/weather-app-${{ env.BUILD_VERSION }}.war"
          Invoke-WebRequest -Uri $ARTIFACT_URL -OutFile weather-app-${{ env.BUILD_VERSION }}.war -Credential (New-Object System.Management.Automation.PSCredential($env:NEXUS_USER,(ConvertTo-SecureString $env:NEXUS_PASS -AsPlainText -Force)))

      # Azure login
      # User input required for execution: input: acr_login_upload
      - name: Azure Login
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Login to ACR
      # User input required for execution: input: acr_login_upload
      - name: Azure Container Registry Login
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' }}
        uses: azure/docker-login@v2
        with:
          login-server: $env:ACR_PATH
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      # Docker login to ACR
      # User input required for execution: input: acr_login_upload
      - name: Docker login to ACR
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' }}
        run: |
          az acr login --name $env:ACR_PATH
        shell: powershell

      # Build docker image
      # User input required for execution: input: acr_login_upload
      - name: Build Docker Image
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' }}
        run: |
          docker build `
            --build-arg BUILD_VERSION=${{ env.BUILD_VERSION }} `
            -t $env:ACR_PATH/myapp:${{ env.BUILD_VERSION }} .

      # Trivy image scan
      - name: Trivy Scan
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' && github.event.inputs.trivy_scan == 'Yes' }}
        shell: powershell
        run: |
          # Ensure Trivy CLI is installed and in PATH
          # Download from https://aquasecurity.github.io/trivy/v0.44.0/getting-started/installation/#windows
          $image = "${env:ACR_PATH}/myapp:${{ env.BUILD_VERSION }}"
          Write-Host "Scanning image: $image"
          
          # Run Trivy scan
          trivy image --severity CRITICAL,HIGH --ignore-unfixed --format table $image

          # Optional: Fail pipeline if vulnerabilities found
          $exitCode = $LASTEXITCODE
          Write-Host "Trivy exited with code $exitCode"
          
          # Uncomment to fail pipeline on vulnerabilities:
          # if ($exitCode -ne 0) { exit $exitCode }

      # Push docker image to ACR
      # User input required for execution: input: acr_login_upload
      - name: Push Docker Image
        id: push-docker-image-to-acr
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' }}
        run: |
          docker push $env:ACR_PATH/myapp:${{ env.BUILD_VERSION }}

      # Notify Deployment Repo (optional)
      # User input required for execution: input: acr_login_upload
      # Executed if "acr_login_upload" is "Yes" and "Push Docker Image" is successfully executed
      - name: Notify Deployment Repo
        if: ${{ github.event.inputs.acr_login_upload == 'Yes' && steps.push-docker-image-to-acr.conclusion == 'success' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_DEPLOY_REPO_CLASSIC_TOKEN }}   # personal access token of Repo 2
          repository: annkur-sharma-devops/AppCode01-WeatherApp-K8s
          event-type: new-image-built-02-ci
          client-payload: '{"build_version": "${{ env.BUILD_VERSION }}"}'




